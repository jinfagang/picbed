// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package common

import (
	json "encoding/json"
	xml "encoding/xml"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon(in *jlexer.Lexer, out *picInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "width":
			out.Width = int(in.Int())
		case "size":
			out.Size = int(in.Int())
		case "ret":
			out.Ret = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "pid":
			out.Pid = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon(out *jwriter.Writer, in picInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int(int(in.Size))
	}
	{
		const prefix string = ",\"ret\":"
		out.RawString(prefix)
		out.Int(int(in.Ret))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"pid\":"
		out.RawString(prefix)
		out.String(string(in.Pid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v picInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v picInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *picInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *picInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon1(in *jlexer.Lexer, out *fileData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "url":
			out.Url = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon1(out *jwriter.Writer, in fileData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v fileData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v fileData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *fileData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *fileData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon1(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon2(in *jlexer.Lexer, out *XiaoMiResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		case "result":
			out.Result = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon2(out *jwriter.Writer, in XiaoMiResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		out.String(string(in.Result))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v XiaoMiResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v XiaoMiResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *XiaoMiResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *XiaoMiResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon2(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon3(in *jlexer.Lexer, out *UserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			out.User = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "code":
			out.Code = int(in.Int())
		case "token":
			out.Token = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "introduction":
			out.Introduction = string(in.String())
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]string, 0, 4)
					} else {
						out.Roles = []string{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Roles = append(out.Roles, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "setting":
			if m, ok := out.Setting.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Setting.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Setting = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon3(out *jwriter.Writer, in UserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"introduction\":"
		out.RawString(prefix)
		out.String(string(in.Introduction))
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Roles {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"setting\":"
		out.RawString(prefix)
		if m, ok := in.Setting.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Setting.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Setting))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon3(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon4(in *jlexer.Lexer, out *UploadConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "local_store":
			(out.LocalStore).UnmarshalEasyJSON(in)
		case "sina_account":
			(out.SinaAccount).UnmarshalEasyJSON(in)
		case "flickr_account":
			(out.FlickrAccount).UnmarshalEasyJSON(in)
		case "imgur_account":
			(out.ImgurAccount).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon4(out *jwriter.Writer, in UploadConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"local_store\":"
		out.RawString(prefix[1:])
		(in.LocalStore).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"sina_account\":"
		out.RawString(prefix)
		(in.SinaAccount).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"flickr_account\":"
		out.RawString(prefix)
		(in.FlickrAccount).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"imgur_account\":"
		out.RawString(prefix)
		(in.ImgurAccount).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UploadConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UploadConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UploadConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UploadConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon4(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon5(in *jlexer.Lexer, out *UploadAuth) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "github":
			(out.Github).UnmarshalEasyJSON(in)
		case "gitee":
			(out.Gitee).UnmarshalEasyJSON(in)
		case "sina":
			(out.Sina).UnmarshalEasyJSON(in)
		case "imgur":
			(out.Imgur).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon5(out *jwriter.Writer, in UploadAuth) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"github\":"
		out.RawString(prefix[1:])
		(in.Github).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"gitee\":"
		out.RawString(prefix)
		(in.Gitee).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"sina\":"
		out.RawString(prefix)
		(in.Sina).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"imgur\":"
		out.RawString(prefix)
		(in.Imgur).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UploadAuth) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UploadAuth) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UploadAuth) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UploadAuth) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon5(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon6(in *jlexer.Lexer, out *TouTiaoResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "width":
			out.Width = int(in.Int())
		case "message":
			out.Message = string(in.String())
		case "web_url":
			out.WebURL = string(in.String())
		case "web_uri":
			out.WebURI = string(in.String())
		case "height":
			out.Height = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon6(out *jwriter.Writer, in TouTiaoResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"web_url\":"
		out.RawString(prefix)
		out.String(string(in.WebURL))
	}
	{
		const prefix string = ",\"web_uri\":"
		out.RawString(prefix)
		out.String(string(in.WebURI))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TouTiaoResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TouTiaoResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TouTiaoResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TouTiaoResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon6(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon7(in *jlexer.Lexer, out *SuNingResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "imgId":
			out.ImgID = string(in.String())
		case "originalSize":
			out.OriginalSize = string(in.String())
		case "src":
			out.Src = string(in.String())
		case "errorcode":
			out.Errorcode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon7(out *jwriter.Writer, in SuNingResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"imgId\":"
		out.RawString(prefix[1:])
		out.String(string(in.ImgID))
	}
	{
		const prefix string = ",\"originalSize\":"
		out.RawString(prefix)
		out.String(string(in.OriginalSize))
	}
	{
		const prefix string = ",\"src\":"
		out.RawString(prefix)
		out.String(string(in.Src))
	}
	{
		const prefix string = ",\"errorcode\":"
		out.RawString(prefix)
		out.String(string(in.Errorcode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SuNingResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SuNingResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SuNingResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SuNingResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon7(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon8(in *jlexer.Lexer, out *SmResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon8(out *jwriter.Writer, in SmResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(in.Data).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SmResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SmResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SmResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SmResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon8(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon9(in *jlexer.Lexer, out *SmData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		case "filename":
			out.Filename = string(in.String())
		case "storename":
			out.Storename = string(in.String())
		case "size":
			out.Size = int(in.Int())
		case "path":
			out.Path = string(in.String())
		case "hash":
			out.Hash = string(in.String())
		case "timestamp":
			out.Timestamp = int(in.Int())
		case "ip":
			out.Ip = string(in.String())
		case "url":
			out.Url = string(in.String())
		case "delete":
			out.Delete = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon9(out *jwriter.Writer, in SmData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"filename\":"
		out.RawString(prefix)
		out.String(string(in.Filename))
	}
	{
		const prefix string = ",\"storename\":"
		out.RawString(prefix)
		out.String(string(in.Storename))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int(int(in.Size))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix)
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int(int(in.Timestamp))
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.Ip))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"delete\":"
		out.RawString(prefix)
		out.String(string(in.Delete))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SmData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SmData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SmData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SmData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon9(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon10(in *jlexer.Lexer, out *SiteConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "site_name":
			out.SiteName = string(in.String())
		case "site_footer":
			out.SiteFooter = string(in.String())
		case "site_url":
			out.SiteUrl = string(in.String())
		case "logo":
			out.Logo = string(in.String())
		case "site_upload_max_number":
			out.SiteUploadMaxNumber = int(in.Int())
		case "site_upload_max_size":
			out.SiteUploadMaxSize = int64(in.Int64())
		case "api":
			(out.Api).UnmarshalEasyJSON(in)
		case "allow_tourists":
			out.AllowTourists = bool(in.Bool())
		case "allow_register":
			out.AllowRegister = bool(in.Bool())
		case "proxy_status":
			out.ProxyStatus = bool(in.Bool())
		case "proxy_node":
			out.ProxyNode = string(in.String())
		case "ip_config":
			(out.IpConfig).UnmarshalEasyJSON(in)
		case "dispatch":
			(out.DispatchOption).UnmarshalEasyJSON(in)
		case "mail_config":
			(out.MailConfig).UnmarshalEasyJSON(in)
		case "db_option":
			(out.DbOption).UnmarshalEasyJSON(in)
		case "jwt_secret":
			out.JwtSecret = string(in.String())
		case "jwt_due_time":
			out.JwtDueTime = time.Duration(in.Int64())
		case "auxpi_salt":
			out.AuxpiSalt = string(in.String())
		case "cache_config":
			out.CacheConfig = bool(in.Bool())
		case "site_upload_way":
			(out.SiteUploadWay).UnmarshalEasyJSON(in)
		case "auxpi_info":
			(out.AuxpiInfo).UnmarshalEasyJSON(in)
		case "status":
			out.Status = bool(in.Bool())
		case "auth":
			out.Auth = bool(in.Bool())
		case "api_default":
			out.ApiDefault = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon10(out *jwriter.Writer, in SiteConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"site_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.SiteName))
	}
	{
		const prefix string = ",\"site_footer\":"
		out.RawString(prefix)
		out.String(string(in.SiteFooter))
	}
	{
		const prefix string = ",\"site_url\":"
		out.RawString(prefix)
		out.String(string(in.SiteUrl))
	}
	{
		const prefix string = ",\"logo\":"
		out.RawString(prefix)
		out.String(string(in.Logo))
	}
	{
		const prefix string = ",\"site_upload_max_number\":"
		out.RawString(prefix)
		out.Int(int(in.SiteUploadMaxNumber))
	}
	{
		const prefix string = ",\"site_upload_max_size\":"
		out.RawString(prefix)
		out.Int64(int64(in.SiteUploadMaxSize))
	}
	{
		const prefix string = ",\"api\":"
		out.RawString(prefix)
		(in.Api).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"allow_tourists\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowTourists))
	}
	{
		const prefix string = ",\"allow_register\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowRegister))
	}
	{
		const prefix string = ",\"proxy_status\":"
		out.RawString(prefix)
		out.Bool(bool(in.ProxyStatus))
	}
	{
		const prefix string = ",\"proxy_node\":"
		out.RawString(prefix)
		out.String(string(in.ProxyNode))
	}
	{
		const prefix string = ",\"ip_config\":"
		out.RawString(prefix)
		(in.IpConfig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"dispatch\":"
		out.RawString(prefix)
		(in.DispatchOption).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"mail_config\":"
		out.RawString(prefix)
		(in.MailConfig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"db_option\":"
		out.RawString(prefix)
		(in.DbOption).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"jwt_secret\":"
		out.RawString(prefix)
		out.String(string(in.JwtSecret))
	}
	{
		const prefix string = ",\"jwt_due_time\":"
		out.RawString(prefix)
		out.Int64(int64(in.JwtDueTime))
	}
	{
		const prefix string = ",\"auxpi_salt\":"
		out.RawString(prefix)
		out.String(string(in.AuxpiSalt))
	}
	{
		const prefix string = ",\"cache_config\":"
		out.RawString(prefix)
		out.Bool(bool(in.CacheConfig))
	}
	{
		const prefix string = ",\"site_upload_way\":"
		out.RawString(prefix)
		(in.SiteUploadWay).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"auxpi_info\":"
		out.RawString(prefix)
		(in.AuxpiInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Bool(bool(in.Status))
	}
	{
		const prefix string = ",\"auth\":"
		out.RawString(prefix)
		out.Bool(bool(in.Auth))
	}
	{
		const prefix string = ",\"api_default\":"
		out.RawString(prefix)
		out.String(string(in.ApiDefault))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SiteConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SiteConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SiteConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SiteConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon10(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon11(in *jlexer.Lexer, out *SiteBase) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "site_name":
			out.SiteName = string(in.String())
		case "site_footer":
			out.SiteFooter = string(in.String())
		case "site_url":
			out.SiteUrl = string(in.String())
		case "logo":
			out.Logo = string(in.String())
		case "site_upload_max_number":
			out.SiteUploadMaxNumber = int(in.Int())
		case "site_upload_max_size":
			out.SiteUploadMaxSize = int64(in.Int64())
		case "allow_tourists":
			out.AllowTourists = bool(in.Bool())
		case "allow_register":
			out.AllowRegister = bool(in.Bool())
		case "jwt_secret":
			out.JwtSecret = string(in.String())
		case "jwt_due_time":
			out.JwtDueTime = time.Duration(in.Int64())
		case "mail_config":
			(out.MailConfig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon11(out *jwriter.Writer, in SiteBase) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"site_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.SiteName))
	}
	{
		const prefix string = ",\"site_footer\":"
		out.RawString(prefix)
		out.String(string(in.SiteFooter))
	}
	{
		const prefix string = ",\"site_url\":"
		out.RawString(prefix)
		out.String(string(in.SiteUrl))
	}
	{
		const prefix string = ",\"logo\":"
		out.RawString(prefix)
		out.String(string(in.Logo))
	}
	{
		const prefix string = ",\"site_upload_max_number\":"
		out.RawString(prefix)
		out.Int(int(in.SiteUploadMaxNumber))
	}
	{
		const prefix string = ",\"site_upload_max_size\":"
		out.RawString(prefix)
		out.Int64(int64(in.SiteUploadMaxSize))
	}
	{
		const prefix string = ",\"allow_tourists\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowTourists))
	}
	{
		const prefix string = ",\"allow_register\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowRegister))
	}
	{
		const prefix string = ",\"jwt_secret\":"
		out.RawString(prefix)
		out.String(string(in.JwtSecret))
	}
	{
		const prefix string = ",\"jwt_due_time\":"
		out.RawString(prefix)
		out.Int64(int64(in.JwtDueTime))
	}
	{
		const prefix string = ",\"mail_config\":"
		out.RawString(prefix)
		(in.MailConfig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SiteBase) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SiteBase) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SiteBase) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SiteBase) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon11(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon12(in *jlexer.Lexer, out *SinaPublicResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "msg":
			out.Msg = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Data = make(map[string]interface{})
				} else {
					out.Data = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 interface{}
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					(out.Data)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon12(out *jwriter.Writer, in SinaPublicResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Data {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				if m, ok := v5Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v5Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v5Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SinaPublicResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SinaPublicResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SinaPublicResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SinaPublicResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon12(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon13(in *jlexer.Lexer, out *SinaPics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pic_1":
			(out.Pic_1).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon13(out *jwriter.Writer, in SinaPics) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pic_1\":"
		out.RawString(prefix[1:])
		(in.Pic_1).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SinaPics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SinaPics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SinaPics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SinaPics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon13(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon14(in *jlexer.Lexer, out *SinaMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon14(out *jwriter.Writer, in SinaMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(in.Data).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SinaMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SinaMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SinaMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SinaMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon14(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon15(in *jlexer.Lexer, out *SinaError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "retcode":
			out.Retcode = string(in.String())
		case "reason":
			out.Reason = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon15(out *jwriter.Writer, in SinaError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"retcode\":"
		out.RawString(prefix[1:])
		out.String(string(in.Retcode))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SinaError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SinaError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SinaError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SinaError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon15(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon16(in *jlexer.Lexer, out *SinaData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "data":
			out.Data = string(in.String())
		case "pics":
			(out.Pics).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon16(out *jwriter.Writer, in SinaData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"pics\":"
		out.RawString(prefix)
		(in.Pics).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SinaData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SinaData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SinaData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SinaData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon16(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon17(in *jlexer.Lexer, out *SinaAccount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = bool(in.Bool())
		case "user_name":
			out.UserName = string(in.String())
		case "pass_word":
			out.PassWord = string(in.String())
		case "reset_sina_cookie_time":
			out.ResetSinaCookieTime = int(in.Int())
		case "defult_pic_size":
			out.DefultPicSize = string(in.String())
		case "proxy":
			(out.Proxy).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon17(out *jwriter.Writer, in SinaAccount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Status))
	}
	{
		const prefix string = ",\"user_name\":"
		out.RawString(prefix)
		out.String(string(in.UserName))
	}
	{
		const prefix string = ",\"pass_word\":"
		out.RawString(prefix)
		out.String(string(in.PassWord))
	}
	{
		const prefix string = ",\"reset_sina_cookie_time\":"
		out.RawString(prefix)
		out.Int(int(in.ResetSinaCookieTime))
	}
	{
		const prefix string = ",\"defult_pic_size\":"
		out.RawString(prefix)
		out.String(string(in.DefultPicSize))
	}
	{
		const prefix string = ",\"proxy\":"
		out.RawString(prefix)
		(in.Proxy).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SinaAccount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SinaAccount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SinaAccount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SinaAccount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon17(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon18(in *jlexer.Lexer, out *RoleJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "display_name":
			out.DisplayName = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "pids":
			if in.IsNull() {
				in.Skip()
				out.PIDs = nil
			} else {
				in.Delim('[')
				if out.PIDs == nil {
					if !in.IsDelim(']') {
						out.PIDs = make([]uint, 0, 8)
					} else {
						out.PIDs = []uint{}
					}
				} else {
					out.PIDs = (out.PIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v6 uint
					v6 = uint(in.Uint())
					out.PIDs = append(out.PIDs, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon18(out *jwriter.Writer, in RoleJson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"display_name\":"
		out.RawString(prefix)
		out.String(string(in.DisplayName))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"pids\":"
		out.RawString(prefix)
		if in.PIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.PIDs {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.Uint(uint(v8))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RoleJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RoleJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RoleJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RoleJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon18(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon19(in *jlexer.Lexer, out *ResultJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "msg":
			out.Msg = string(in.String())
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon19(out *jwriter.Writer, in ResultJson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(in.Data).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResultJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResultJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResultJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResultJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon19(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon20(in *jlexer.Lexer, out *RespJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "msg":
			out.Msg = string(in.String())
		case "data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Data.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Data = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon20(out *jwriter.Writer, in RespJson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if m, ok := in.Data.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Data.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Data))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon20(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon21(in *jlexer.Lexer, out *ProxyConf) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = bool(in.Bool())
		case "node":
			out.Node = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon21(out *jwriter.Writer, in ProxyConf) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Status))
	}
	{
		const prefix string = ",\"node\":"
		out.RawString(prefix)
		out.String(string(in.Node))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProxyConf) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProxyConf) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProxyConf) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProxyConf) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon21(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon22(in *jlexer.Lexer, out *NetEasyResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]string, 0, 4)
					} else {
						out.Data = []string{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.Data = append(out.Data, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon22(out *jwriter.Writer, in NetEasyResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Data {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NetEasyResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NetEasyResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NetEasyResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NetEasyResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon22(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon23(in *jlexer.Lexer, out *MenuReceive) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "disable":
			if in.IsNull() {
				in.Skip()
				out.Disable = nil
			} else {
				in.Delim('[')
				if out.Disable == nil {
					if !in.IsDelim(']') {
						out.Disable = make([]struct {
							ID         int         `json:"id"`
							CreatedOn  int         `json:"created_on"`
							ModifiedOn int         `json:"modified_on"`
							DeletedOn  int         `json:"deleted_on"`
							CreatedDay string      `json:"created_day"`
							Name       string      `json:"name"`
							Desc       string      `json:"desc"`
							URL        string      `json:"url"`
							Icon       string      `json:"icon"`
							Color      string      `json:"color"`
							API        string      `json:"api"`
							Router     string      `json:"router"`
							Status     bool        `json:"Status"`
							Weight     int         `json:"weight"`
							Rank       int         `json:"rank"`
							Auth       int         `json:"Auth"`
							Images     interface{} `json:"Images"`
						}, 0, 1)
					} else {
						out.Disable = []struct {
							ID         int         `json:"id"`
							CreatedOn  int         `json:"created_on"`
							ModifiedOn int         `json:"modified_on"`
							DeletedOn  int         `json:"deleted_on"`
							CreatedDay string      `json:"created_day"`
							Name       string      `json:"name"`
							Desc       string      `json:"desc"`
							URL        string      `json:"url"`
							Icon       string      `json:"icon"`
							Color      string      `json:"color"`
							API        string      `json:"api"`
							Router     string      `json:"router"`
							Status     bool        `json:"Status"`
							Weight     int         `json:"weight"`
							Rank       int         `json:"rank"`
							Auth       int         `json:"Auth"`
							Images     interface{} `json:"Images"`
						}{}
					}
				} else {
					out.Disable = (out.Disable)[:0]
				}
				for !in.IsDelim(']') {
					var v12 struct {
						ID         int         `json:"id"`
						CreatedOn  int         `json:"created_on"`
						ModifiedOn int         `json:"modified_on"`
						DeletedOn  int         `json:"deleted_on"`
						CreatedDay string      `json:"created_day"`
						Name       string      `json:"name"`
						Desc       string      `json:"desc"`
						URL        string      `json:"url"`
						Icon       string      `json:"icon"`
						Color      string      `json:"color"`
						API        string      `json:"api"`
						Router     string      `json:"router"`
						Status     bool        `json:"Status"`
						Weight     int         `json:"weight"`
						Rank       int         `json:"rank"`
						Auth       int         `json:"Auth"`
						Images     interface{} `json:"Images"`
					}
					easyjsonC803d3e7Decode(in, &v12)
					out.Disable = append(out.Disable, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "enable":
			if in.IsNull() {
				in.Skip()
				out.Enable = nil
			} else {
				in.Delim('[')
				if out.Enable == nil {
					if !in.IsDelim(']') {
						out.Enable = make([]struct {
							ID         int         `json:"id"`
							CreatedOn  int         `json:"created_on"`
							ModifiedOn int         `json:"modified_on"`
							DeletedOn  int         `json:"deleted_on"`
							CreatedDay string      `json:"created_day"`
							Name       string      `json:"name"`
							Desc       string      `json:"desc"`
							URL        string      `json:"url"`
							Icon       string      `json:"icon"`
							Color      string      `json:"color"`
							API        string      `json:"api"`
							Router     string      `json:"router"`
							Status     bool        `json:"Status"`
							Weight     int         `json:"weight"`
							Rank       int         `json:"rank"`
							Auth       int         `json:"Auth"`
							Images     interface{} `json:"Images"`
						}, 0, 1)
					} else {
						out.Enable = []struct {
							ID         int         `json:"id"`
							CreatedOn  int         `json:"created_on"`
							ModifiedOn int         `json:"modified_on"`
							DeletedOn  int         `json:"deleted_on"`
							CreatedDay string      `json:"created_day"`
							Name       string      `json:"name"`
							Desc       string      `json:"desc"`
							URL        string      `json:"url"`
							Icon       string      `json:"icon"`
							Color      string      `json:"color"`
							API        string      `json:"api"`
							Router     string      `json:"router"`
							Status     bool        `json:"Status"`
							Weight     int         `json:"weight"`
							Rank       int         `json:"rank"`
							Auth       int         `json:"Auth"`
							Images     interface{} `json:"Images"`
						}{}
					}
				} else {
					out.Enable = (out.Enable)[:0]
				}
				for !in.IsDelim(']') {
					var v13 struct {
						ID         int         `json:"id"`
						CreatedOn  int         `json:"created_on"`
						ModifiedOn int         `json:"modified_on"`
						DeletedOn  int         `json:"deleted_on"`
						CreatedDay string      `json:"created_day"`
						Name       string      `json:"name"`
						Desc       string      `json:"desc"`
						URL        string      `json:"url"`
						Icon       string      `json:"icon"`
						Color      string      `json:"color"`
						API        string      `json:"api"`
						Router     string      `json:"router"`
						Status     bool        `json:"Status"`
						Weight     int         `json:"weight"`
						Rank       int         `json:"rank"`
						Auth       int         `json:"Auth"`
						Images     interface{} `json:"Images"`
					}
					easyjsonC803d3e7Decode(in, &v13)
					out.Enable = append(out.Enable, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon23(out *jwriter.Writer, in MenuReceive) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"disable\":"
		out.RawString(prefix[1:])
		if in.Disable == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Disable {
				if v14 > 0 {
					out.RawByte(',')
				}
				easyjsonC803d3e7Encode(out, v15)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"enable\":"
		out.RawString(prefix)
		if in.Enable == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.Enable {
				if v16 > 0 {
					out.RawByte(',')
				}
				easyjsonC803d3e7Encode(out, v17)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MenuReceive) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MenuReceive) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MenuReceive) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MenuReceive) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon23(l, v)
}
func easyjsonC803d3e7Decode(in *jlexer.Lexer, out *struct {
	ID         int         `json:"id"`
	CreatedOn  int         `json:"created_on"`
	ModifiedOn int         `json:"modified_on"`
	DeletedOn  int         `json:"deleted_on"`
	CreatedDay string      `json:"created_day"`
	Name       string      `json:"name"`
	Desc       string      `json:"desc"`
	URL        string      `json:"url"`
	Icon       string      `json:"icon"`
	Color      string      `json:"color"`
	API        string      `json:"api"`
	Router     string      `json:"router"`
	Status     bool        `json:"Status"`
	Weight     int         `json:"weight"`
	Rank       int         `json:"rank"`
	Auth       int         `json:"Auth"`
	Images     interface{} `json:"Images"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "created_on":
			out.CreatedOn = int(in.Int())
		case "modified_on":
			out.ModifiedOn = int(in.Int())
		case "deleted_on":
			out.DeletedOn = int(in.Int())
		case "created_day":
			out.CreatedDay = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "desc":
			out.Desc = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "color":
			out.Color = string(in.String())
		case "api":
			out.API = string(in.String())
		case "router":
			out.Router = string(in.String())
		case "Status":
			out.Status = bool(in.Bool())
		case "weight":
			out.Weight = int(in.Int())
		case "rank":
			out.Rank = int(in.Int())
		case "Auth":
			out.Auth = int(in.Int())
		case "Images":
			if m, ok := out.Images.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Images.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Images = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7Encode(out *jwriter.Writer, in struct {
	ID         int         `json:"id"`
	CreatedOn  int         `json:"created_on"`
	ModifiedOn int         `json:"modified_on"`
	DeletedOn  int         `json:"deleted_on"`
	CreatedDay string      `json:"created_day"`
	Name       string      `json:"name"`
	Desc       string      `json:"desc"`
	URL        string      `json:"url"`
	Icon       string      `json:"icon"`
	Color      string      `json:"color"`
	API        string      `json:"api"`
	Router     string      `json:"router"`
	Status     bool        `json:"Status"`
	Weight     int         `json:"weight"`
	Rank       int         `json:"rank"`
	Auth       int         `json:"Auth"`
	Images     interface{} `json:"Images"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"created_on\":"
		out.RawString(prefix)
		out.Int(int(in.CreatedOn))
	}
	{
		const prefix string = ",\"modified_on\":"
		out.RawString(prefix)
		out.Int(int(in.ModifiedOn))
	}
	{
		const prefix string = ",\"deleted_on\":"
		out.RawString(prefix)
		out.Int(int(in.DeletedOn))
	}
	{
		const prefix string = ",\"created_day\":"
		out.RawString(prefix)
		out.String(string(in.CreatedDay))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"desc\":"
		out.RawString(prefix)
		out.String(string(in.Desc))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.String(string(in.Color))
	}
	{
		const prefix string = ",\"api\":"
		out.RawString(prefix)
		out.String(string(in.API))
	}
	{
		const prefix string = ",\"router\":"
		out.RawString(prefix)
		out.String(string(in.Router))
	}
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix)
		out.Bool(bool(in.Status))
	}
	{
		const prefix string = ",\"weight\":"
		out.RawString(prefix)
		out.Int(int(in.Weight))
	}
	{
		const prefix string = ",\"rank\":"
		out.RawString(prefix)
		out.Int(int(in.Rank))
	}
	{
		const prefix string = ",\"Auth\":"
		out.RawString(prefix)
		out.Int(int(in.Auth))
	}
	{
		const prefix string = ",\"Images\":"
		out.RawString(prefix)
		if m, ok := in.Images.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Images.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Images))
		}
	}
	out.RawByte('}')
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon24(in *jlexer.Lexer, out *MailConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = bool(in.Bool())
		case "host":
			out.Host = string(in.String())
		case "user":
			out.User = string(in.String())
		case "pass":
			out.Pass = string(in.String())
		case "port":
			out.Port = string(in.String())
		case "from":
			out.From = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon24(out *jwriter.Writer, in MailConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Status))
	}
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"pass\":"
		out.RawString(prefix)
		out.String(string(in.Pass))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.String(string(in.Port))
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MailConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MailConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MailConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MailConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon24(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon25(in *jlexer.Lexer, out *LocalStore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = bool(in.Bool())
		case "storage_location":
			out.StorageLocation = string(in.String())
		case "link":
			out.Link = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon25(out *jwriter.Writer, in LocalStore) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Status))
	}
	{
		const prefix string = ",\"storage_location\":"
		out.RawString(prefix)
		out.String(string(in.StorageLocation))
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LocalStore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocalStore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LocalStore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocalStore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon25(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon26(in *jlexer.Lexer, out *LimitConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = bool(in.Bool())
		case "block_time":
			out.BlockTime = int64(in.Int64())
		case "dead_line":
			out.DeadLine = int(in.Int())
		case "allow_num":
			out.AllowNum = int(in.Int())
		case "allow_time":
			out.AllowTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon26(out *jwriter.Writer, in LimitConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Status))
	}
	{
		const prefix string = ",\"block_time\":"
		out.RawString(prefix)
		out.Int64(int64(in.BlockTime))
	}
	{
		const prefix string = ",\"dead_line\":"
		out.RawString(prefix)
		out.Int(int(in.DeadLine))
	}
	{
		const prefix string = ",\"allow_num\":"
		out.RawString(prefix)
		out.Int(int(in.AllowNum))
	}
	{
		const prefix string = ",\"allow_time\":"
		out.RawString(prefix)
		out.Int64(int64(in.AllowTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LimitConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LimitConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LimitConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LimitConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon26(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon27(in *jlexer.Lexer, out *JueJinResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "s":
			out.S = int(in.Int())
		case "m":
			out.M = string(in.String())
		case "d":
			easyjsonC803d3e7Decode1(in, &out.D)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon27(out *jwriter.Writer, in JueJinResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix[1:])
		out.Int(int(in.S))
	}
	{
		const prefix string = ",\"m\":"
		out.RawString(prefix)
		out.String(string(in.M))
	}
	{
		const prefix string = ",\"d\":"
		out.RawString(prefix)
		easyjsonC803d3e7Encode1(out, in.D)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JueJinResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JueJinResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JueJinResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JueJinResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon27(l, v)
}
func easyjsonC803d3e7Decode1(in *jlexer.Lexer, out *struct {
	Key    string `json:"key"`
	Domain string `json:"domain"`
	URL    struct {
		HTTP  string `json:"http"`
		HTTPS string `json:"https"`
	} `json:"url"`
	ImageInfo struct {
		Width  int    `json:"width"`
		Height int    `json:"height"`
		Format string `json:"format"`
		Size   int    `json:"size"`
	} `json:"imageInfo"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		case "url":
			easyjsonC803d3e7Decode2(in, &out.URL)
		case "imageInfo":
			easyjsonC803d3e7Decode3(in, &out.ImageInfo)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7Encode1(out *jwriter.Writer, in struct {
	Key    string `json:"key"`
	Domain string `json:"domain"`
	URL    struct {
		HTTP  string `json:"http"`
		HTTPS string `json:"https"`
	} `json:"url"`
	ImageInfo struct {
		Width  int    `json:"width"`
		Height int    `json:"height"`
		Format string `json:"format"`
		Size   int    `json:"size"`
	} `json:"imageInfo"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"domain\":"
		out.RawString(prefix)
		out.String(string(in.Domain))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		easyjsonC803d3e7Encode2(out, in.URL)
	}
	{
		const prefix string = ",\"imageInfo\":"
		out.RawString(prefix)
		easyjsonC803d3e7Encode3(out, in.ImageInfo)
	}
	out.RawByte('}')
}
func easyjsonC803d3e7Decode3(in *jlexer.Lexer, out *struct {
	Width  int    `json:"width"`
	Height int    `json:"height"`
	Format string `json:"format"`
	Size   int    `json:"size"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		case "format":
			out.Format = string(in.String())
		case "size":
			out.Size = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7Encode3(out *jwriter.Writer, in struct {
	Width  int    `json:"width"`
	Height int    `json:"height"`
	Format string `json:"format"`
	Size   int    `json:"size"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"format\":"
		out.RawString(prefix)
		out.String(string(in.Format))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int(int(in.Size))
	}
	out.RawByte('}')
}
func easyjsonC803d3e7Decode2(in *jlexer.Lexer, out *struct {
	HTTP  string `json:"http"`
	HTTPS string `json:"https"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "http":
			out.HTTP = string(in.String())
		case "https":
			out.HTTPS = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7Encode2(out *jwriter.Writer, in struct {
	HTTP  string `json:"http"`
	HTTPS string `json:"https"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"http\":"
		out.RawString(prefix[1:])
		out.String(string(in.HTTP))
	}
	{
		const prefix string = ",\"https\":"
		out.RawString(prefix)
		out.String(string(in.HTTPS))
	}
	out.RawByte('}')
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon28(in *jlexer.Lexer, out *ImgurResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			easyjsonC803d3e7Decode4(in, &out.Data)
		case "success":
			out.Success = bool(in.Bool())
		case "status":
			out.Status = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon28(out *jwriter.Writer, in ImgurResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		easyjsonC803d3e7Encode4(out, in.Data)
	}
	{
		const prefix string = ",\"success\":"
		out.RawString(prefix)
		out.Bool(bool(in.Success))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ImgurResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ImgurResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ImgurResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ImgurResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon28(l, v)
}
func easyjsonC803d3e7Decode4(in *jlexer.Lexer, out *struct {
	ID          string        `json:"id"`
	Title       interface{}   `json:"title"`
	Description interface{}   `json:"description"`
	Datetime    int           `json:"datetime"`
	Type        string        `json:"type"`
	Animated    bool          `json:"animated"`
	Width       int           `json:"width"`
	Height      int           `json:"height"`
	Size        int           `json:"size"`
	Views       int           `json:"views"`
	Bandwidth   int           `json:"bandwidth"`
	Vote        interface{}   `json:"vote"`
	Favorite    bool          `json:"favorite"`
	Nsfw        interface{}   `json:"nsfw"`
	Section     interface{}   `json:"section"`
	AccountURL  interface{}   `json:"account_url"`
	AccountID   int           `json:"account_id"`
	IsAd        bool          `json:"is_ad"`
	InMostViral bool          `json:"in_most_viral"`
	Tags        []interface{} `json:"tags"`
	AdType      int           `json:"ad_type"`
	AdURL       string        `json:"ad_url"`
	InGallery   bool          `json:"in_gallery"`
	Deletehash  string        `json:"deletehash"`
	Name        string        `json:"name"`
	Link        string        `json:"link"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "title":
			if m, ok := out.Title.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Title.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Title = in.Interface()
			}
		case "description":
			if m, ok := out.Description.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Description.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Description = in.Interface()
			}
		case "datetime":
			out.Datetime = int(in.Int())
		case "type":
			out.Type = string(in.String())
		case "animated":
			out.Animated = bool(in.Bool())
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		case "size":
			out.Size = int(in.Int())
		case "views":
			out.Views = int(in.Int())
		case "bandwidth":
			out.Bandwidth = int(in.Int())
		case "vote":
			if m, ok := out.Vote.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Vote.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Vote = in.Interface()
			}
		case "favorite":
			out.Favorite = bool(in.Bool())
		case "nsfw":
			if m, ok := out.Nsfw.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Nsfw.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Nsfw = in.Interface()
			}
		case "section":
			if m, ok := out.Section.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Section.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Section = in.Interface()
			}
		case "account_url":
			if m, ok := out.AccountURL.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.AccountURL.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.AccountURL = in.Interface()
			}
		case "account_id":
			out.AccountID = int(in.Int())
		case "is_ad":
			out.IsAd = bool(in.Bool())
		case "in_most_viral":
			out.InMostViral = bool(in.Bool())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]interface{}, 0, 4)
					} else {
						out.Tags = []interface{}{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v18 interface{}
					if m, ok := v18.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v18.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v18 = in.Interface()
					}
					out.Tags = append(out.Tags, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ad_type":
			out.AdType = int(in.Int())
		case "ad_url":
			out.AdURL = string(in.String())
		case "in_gallery":
			out.InGallery = bool(in.Bool())
		case "deletehash":
			out.Deletehash = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "link":
			out.Link = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7Encode4(out *jwriter.Writer, in struct {
	ID          string        `json:"id"`
	Title       interface{}   `json:"title"`
	Description interface{}   `json:"description"`
	Datetime    int           `json:"datetime"`
	Type        string        `json:"type"`
	Animated    bool          `json:"animated"`
	Width       int           `json:"width"`
	Height      int           `json:"height"`
	Size        int           `json:"size"`
	Views       int           `json:"views"`
	Bandwidth   int           `json:"bandwidth"`
	Vote        interface{}   `json:"vote"`
	Favorite    bool          `json:"favorite"`
	Nsfw        interface{}   `json:"nsfw"`
	Section     interface{}   `json:"section"`
	AccountURL  interface{}   `json:"account_url"`
	AccountID   int           `json:"account_id"`
	IsAd        bool          `json:"is_ad"`
	InMostViral bool          `json:"in_most_viral"`
	Tags        []interface{} `json:"tags"`
	AdType      int           `json:"ad_type"`
	AdURL       string        `json:"ad_url"`
	InGallery   bool          `json:"in_gallery"`
	Deletehash  string        `json:"deletehash"`
	Name        string        `json:"name"`
	Link        string        `json:"link"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		if m, ok := in.Title.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Title.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Title))
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if m, ok := in.Description.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Description.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Description))
		}
	}
	{
		const prefix string = ",\"datetime\":"
		out.RawString(prefix)
		out.Int(int(in.Datetime))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"animated\":"
		out.RawString(prefix)
		out.Bool(bool(in.Animated))
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int(int(in.Size))
	}
	{
		const prefix string = ",\"views\":"
		out.RawString(prefix)
		out.Int(int(in.Views))
	}
	{
		const prefix string = ",\"bandwidth\":"
		out.RawString(prefix)
		out.Int(int(in.Bandwidth))
	}
	{
		const prefix string = ",\"vote\":"
		out.RawString(prefix)
		if m, ok := in.Vote.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Vote.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Vote))
		}
	}
	{
		const prefix string = ",\"favorite\":"
		out.RawString(prefix)
		out.Bool(bool(in.Favorite))
	}
	{
		const prefix string = ",\"nsfw\":"
		out.RawString(prefix)
		if m, ok := in.Nsfw.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Nsfw.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Nsfw))
		}
	}
	{
		const prefix string = ",\"section\":"
		out.RawString(prefix)
		if m, ok := in.Section.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Section.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Section))
		}
	}
	{
		const prefix string = ",\"account_url\":"
		out.RawString(prefix)
		if m, ok := in.AccountURL.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.AccountURL.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.AccountURL))
		}
	}
	{
		const prefix string = ",\"account_id\":"
		out.RawString(prefix)
		out.Int(int(in.AccountID))
	}
	{
		const prefix string = ",\"is_ad\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAd))
	}
	{
		const prefix string = ",\"in_most_viral\":"
		out.RawString(prefix)
		out.Bool(bool(in.InMostViral))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.Tags {
				if v19 > 0 {
					out.RawByte(',')
				}
				if m, ok := v20.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v20.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v20))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ad_type\":"
		out.RawString(prefix)
		out.Int(int(in.AdType))
	}
	{
		const prefix string = ",\"ad_url\":"
		out.RawString(prefix)
		out.String(string(in.AdURL))
	}
	{
		const prefix string = ",\"in_gallery\":"
		out.RawString(prefix)
		out.Bool(bool(in.InGallery))
	}
	{
		const prefix string = ",\"deletehash\":"
		out.RawString(prefix)
		out.String(string(in.Deletehash))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	out.RawByte('}')
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon29(in *jlexer.Lexer, out *ImgurAccount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = bool(in.Bool())
		case "proxy":
			(out.Proxy).UnmarshalEasyJSON(in)
		case "imgur_id":
			out.ImgurID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon29(out *jwriter.Writer, in ImgurAccount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Status))
	}
	{
		const prefix string = ",\"proxy\":"
		out.RawString(prefix)
		(in.Proxy).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"imgur_id\":"
		out.RawString(prefix)
		out.String(string(in.ImgurID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ImgurAccount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ImgurAccount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ImgurAccount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ImgurAccount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon29(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon30(in *jlexer.Lexer, out *ImageRespJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "msg":
			out.Msg = string(in.String())
		case "data":
			easyjsonC803d3e7Decode5(in, &out.Data)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon30(out *jwriter.Writer, in ImageRespJson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		easyjsonC803d3e7Encode5(out, in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ImageRespJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ImageRespJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ImageRespJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ImageRespJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon30(l, v)
}
func easyjsonC803d3e7Decode5(in *jlexer.Lexer, out *struct {
	Delete string `json:"delete"`
	Name   string `json:"name"`
	URL    string `json:"url"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delete":
			out.Delete = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7Encode5(out *jwriter.Writer, in struct {
	Delete string `json:"delete"`
	Name   string `json:"name"`
	URL    string `json:"url"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"delete\":"
		out.RawString(prefix[1:])
		out.String(string(in.Delete))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	out.RawByte('}')
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon31(in *jlexer.Lexer, out *ImageJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "name":
			out.Name = string(in.String())
		case "url":
			out.Url = string(in.String())
		case "user_id":
			out.UserID = int(in.Int())
		case "store_id":
			out.StoreID = int(in.Int())
		case "delete":
			out.Delete = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "ip":
			out.IP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon31(out *jwriter.Writer, in ImageJson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"store_id\":"
		out.RawString(prefix)
		out.Int(int(in.StoreID))
	}
	{
		const prefix string = ",\"delete\":"
		out.RawString(prefix)
		out.String(string(in.Delete))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ImageJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ImageJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ImageJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ImageJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon31(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon32(in *jlexer.Lexer, out *GithubResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "content":
			easyjsonC803d3e7Decode6(in, &out.Content)
		case "commit":
			easyjsonC803d3e7Decode7(in, &out.Commit)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon32(out *jwriter.Writer, in GithubResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix[1:])
		easyjsonC803d3e7Encode6(out, in.Content)
	}
	{
		const prefix string = ",\"commit\":"
		out.RawString(prefix)
		easyjsonC803d3e7Encode7(out, in.Commit)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GithubResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GithubResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GithubResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GithubResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon32(l, v)
}
func easyjsonC803d3e7Decode7(in *jlexer.Lexer, out *struct {
	Sha     string `json:"sha"`
	NodeID  string `json:"node_id"`
	URL     string `json:"url"`
	HTMLURL string `json:"html_url"`
	Author  struct {
		Date  time.Time `json:"date"`
		Name  string    `json:"name"`
		Email string    `json:"email"`
	} `json:"author"`
	Committer struct {
		Date  time.Time `json:"date"`
		Name  string    `json:"name"`
		Email string    `json:"email"`
	} `json:"committer"`
	Message string `json:"message"`
	Tree    struct {
		URL string `json:"url"`
		Sha string `json:"sha"`
	} `json:"tree"`
	Parents []struct {
		URL     string `json:"url"`
		HTMLURL string `json:"html_url"`
		Sha     string `json:"sha"`
	} `json:"parents"`
	Verification struct {
		Verified  bool        `json:"verified"`
		Reason    string      `json:"reason"`
		Signature interface{} `json:"signature"`
		Payload   interface{} `json:"payload"`
	} `json:"verification"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sha":
			out.Sha = string(in.String())
		case "node_id":
			out.NodeID = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "html_url":
			out.HTMLURL = string(in.String())
		case "author":
			easyjsonC803d3e7Decode8(in, &out.Author)
		case "committer":
			easyjsonC803d3e7Decode8(in, &out.Committer)
		case "message":
			out.Message = string(in.String())
		case "tree":
			easyjsonC803d3e7Decode9(in, &out.Tree)
		case "parents":
			if in.IsNull() {
				in.Skip()
				out.Parents = nil
			} else {
				in.Delim('[')
				if out.Parents == nil {
					if !in.IsDelim(']') {
						out.Parents = make([]struct {
							URL     string `json:"url"`
							HTMLURL string `json:"html_url"`
							Sha     string `json:"sha"`
						}, 0, 1)
					} else {
						out.Parents = []struct {
							URL     string `json:"url"`
							HTMLURL string `json:"html_url"`
							Sha     string `json:"sha"`
						}{}
					}
				} else {
					out.Parents = (out.Parents)[:0]
				}
				for !in.IsDelim(']') {
					var v21 struct {
						URL     string `json:"url"`
						HTMLURL string `json:"html_url"`
						Sha     string `json:"sha"`
					}
					easyjsonC803d3e7Decode10(in, &v21)
					out.Parents = append(out.Parents, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "verification":
			easyjsonC803d3e7Decode11(in, &out.Verification)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7Encode7(out *jwriter.Writer, in struct {
	Sha     string `json:"sha"`
	NodeID  string `json:"node_id"`
	URL     string `json:"url"`
	HTMLURL string `json:"html_url"`
	Author  struct {
		Date  time.Time `json:"date"`
		Name  string    `json:"name"`
		Email string    `json:"email"`
	} `json:"author"`
	Committer struct {
		Date  time.Time `json:"date"`
		Name  string    `json:"name"`
		Email string    `json:"email"`
	} `json:"committer"`
	Message string `json:"message"`
	Tree    struct {
		URL string `json:"url"`
		Sha string `json:"sha"`
	} `json:"tree"`
	Parents []struct {
		URL     string `json:"url"`
		HTMLURL string `json:"html_url"`
		Sha     string `json:"sha"`
	} `json:"parents"`
	Verification struct {
		Verified  bool        `json:"verified"`
		Reason    string      `json:"reason"`
		Signature interface{} `json:"signature"`
		Payload   interface{} `json:"payload"`
	} `json:"verification"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sha\":"
		out.RawString(prefix[1:])
		out.String(string(in.Sha))
	}
	{
		const prefix string = ",\"node_id\":"
		out.RawString(prefix)
		out.String(string(in.NodeID))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"html_url\":"
		out.RawString(prefix)
		out.String(string(in.HTMLURL))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		easyjsonC803d3e7Encode8(out, in.Author)
	}
	{
		const prefix string = ",\"committer\":"
		out.RawString(prefix)
		easyjsonC803d3e7Encode8(out, in.Committer)
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"tree\":"
		out.RawString(prefix)
		easyjsonC803d3e7Encode9(out, in.Tree)
	}
	{
		const prefix string = ",\"parents\":"
		out.RawString(prefix)
		if in.Parents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.Parents {
				if v22 > 0 {
					out.RawByte(',')
				}
				easyjsonC803d3e7Encode10(out, v23)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"verification\":"
		out.RawString(prefix)
		easyjsonC803d3e7Encode11(out, in.Verification)
	}
	out.RawByte('}')
}
func easyjsonC803d3e7Decode11(in *jlexer.Lexer, out *struct {
	Verified  bool        `json:"verified"`
	Reason    string      `json:"reason"`
	Signature interface{} `json:"signature"`
	Payload   interface{} `json:"payload"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "verified":
			out.Verified = bool(in.Bool())
		case "reason":
			out.Reason = string(in.String())
		case "signature":
			if m, ok := out.Signature.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Signature.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Signature = in.Interface()
			}
		case "payload":
			if m, ok := out.Payload.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Payload.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Payload = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7Encode11(out *jwriter.Writer, in struct {
	Verified  bool        `json:"verified"`
	Reason    string      `json:"reason"`
	Signature interface{} `json:"signature"`
	Payload   interface{} `json:"payload"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"verified\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Verified))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"signature\":"
		out.RawString(prefix)
		if m, ok := in.Signature.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Signature.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Signature))
		}
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		if m, ok := in.Payload.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Payload.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Payload))
		}
	}
	out.RawByte('}')
}
func easyjsonC803d3e7Decode10(in *jlexer.Lexer, out *struct {
	URL     string `json:"url"`
	HTMLURL string `json:"html_url"`
	Sha     string `json:"sha"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "html_url":
			out.HTMLURL = string(in.String())
		case "sha":
			out.Sha = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7Encode10(out *jwriter.Writer, in struct {
	URL     string `json:"url"`
	HTMLURL string `json:"html_url"`
	Sha     string `json:"sha"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"html_url\":"
		out.RawString(prefix)
		out.String(string(in.HTMLURL))
	}
	{
		const prefix string = ",\"sha\":"
		out.RawString(prefix)
		out.String(string(in.Sha))
	}
	out.RawByte('}')
}
func easyjsonC803d3e7Decode9(in *jlexer.Lexer, out *struct {
	URL string `json:"url"`
	Sha string `json:"sha"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "sha":
			out.Sha = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7Encode9(out *jwriter.Writer, in struct {
	URL string `json:"url"`
	Sha string `json:"sha"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"sha\":"
		out.RawString(prefix)
		out.String(string(in.Sha))
	}
	out.RawByte('}')
}
func easyjsonC803d3e7Decode8(in *jlexer.Lexer, out *struct {
	Date  time.Time `json:"date"`
	Name  string    `json:"name"`
	Email string    `json:"email"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7Encode8(out *jwriter.Writer, in struct {
	Date  time.Time `json:"date"`
	Name  string    `json:"name"`
	Email string    `json:"email"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix[1:])
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}
func easyjsonC803d3e7Decode6(in *jlexer.Lexer, out *struct {
	Name        string `json:"name"`
	Path        string `json:"path"`
	Sha         string `json:"sha"`
	Size        int    `json:"size"`
	URL         string `json:"url"`
	HTMLURL     string `json:"html_url"`
	GitURL      string `json:"git_url"`
	DownloadURL string `json:"download_url"`
	Type        string `json:"type"`
	Links       struct {
		Self string `json:"self"`
		Git  string `json:"git"`
		HTML string `json:"html"`
	} `json:"_links"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "sha":
			out.Sha = string(in.String())
		case "size":
			out.Size = int(in.Int())
		case "url":
			out.URL = string(in.String())
		case "html_url":
			out.HTMLURL = string(in.String())
		case "git_url":
			out.GitURL = string(in.String())
		case "download_url":
			out.DownloadURL = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "_links":
			easyjsonC803d3e7Decode12(in, &out.Links)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7Encode6(out *jwriter.Writer, in struct {
	Name        string `json:"name"`
	Path        string `json:"path"`
	Sha         string `json:"sha"`
	Size        int    `json:"size"`
	URL         string `json:"url"`
	HTMLURL     string `json:"html_url"`
	GitURL      string `json:"git_url"`
	DownloadURL string `json:"download_url"`
	Type        string `json:"type"`
	Links       struct {
		Self string `json:"self"`
		Git  string `json:"git"`
		HTML string `json:"html"`
	} `json:"_links"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"sha\":"
		out.RawString(prefix)
		out.String(string(in.Sha))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int(int(in.Size))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"html_url\":"
		out.RawString(prefix)
		out.String(string(in.HTMLURL))
	}
	{
		const prefix string = ",\"git_url\":"
		out.RawString(prefix)
		out.String(string(in.GitURL))
	}
	{
		const prefix string = ",\"download_url\":"
		out.RawString(prefix)
		out.String(string(in.DownloadURL))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"_links\":"
		out.RawString(prefix)
		easyjsonC803d3e7Encode12(out, in.Links)
	}
	out.RawByte('}')
}
func easyjsonC803d3e7Decode12(in *jlexer.Lexer, out *struct {
	Self string `json:"self"`
	Git  string `json:"git"`
	HTML string `json:"html"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "self":
			out.Self = string(in.String())
		case "git":
			out.Git = string(in.String())
		case "html":
			out.HTML = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7Encode12(out *jwriter.Writer, in struct {
	Self string `json:"self"`
	Git  string `json:"git"`
	HTML string `json:"html"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"self\":"
		out.RawString(prefix[1:])
		out.String(string(in.Self))
	}
	{
		const prefix string = ",\"git\":"
		out.RawString(prefix)
		out.String(string(in.Git))
	}
	{
		const prefix string = ",\"html\":"
		out.RawString(prefix)
		out.String(string(in.HTML))
	}
	out.RawByte('}')
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon33(in *jlexer.Lexer, out *GithubRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		case "committer":
			easyjsonC803d3e7Decode13(in, &out.Committer)
		case "content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon33(out *jwriter.Writer, in GithubRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"committer\":"
		out.RawString(prefix)
		easyjsonC803d3e7Encode13(out, in.Committer)
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GithubRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GithubRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GithubRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GithubRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon33(l, v)
}
func easyjsonC803d3e7Decode13(in *jlexer.Lexer, out *struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7Encode13(out *jwriter.Writer, in struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon34(in *jlexer.Lexer, out *GithubMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		case "documentation_url":
			out.DocumentationURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon34(out *jwriter.Writer, in GithubMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"documentation_url\":"
		out.RawString(prefix)
		out.String(string(in.DocumentationURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GithubMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GithubMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GithubMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GithubMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon34(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon35(in *jlexer.Lexer, out *GithubAccount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access_token":
			out.AccessToken = string(in.String())
		case "owner":
			out.Owner = string(in.String())
		case "repo":
			out.Repo = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "proxy":
			(out.Proxy).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon35(out *jwriter.Writer, in GithubAccount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"access_token\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccessToken))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.String(string(in.Owner))
	}
	{
		const prefix string = ",\"repo\":"
		out.RawString(prefix)
		out.String(string(in.Repo))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"proxy\":"
		out.RawString(prefix)
		(in.Proxy).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GithubAccount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GithubAccount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GithubAccount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GithubAccount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon35(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon36(in *jlexer.Lexer, out *GiteeResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "content":
			easyjsonC803d3e7Decode14(in, &out.Content)
		case "commit":
			easyjsonC803d3e7Decode15(in, &out.Commit)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon36(out *jwriter.Writer, in GiteeResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix[1:])
		easyjsonC803d3e7Encode14(out, in.Content)
	}
	{
		const prefix string = ",\"commit\":"
		out.RawString(prefix)
		easyjsonC803d3e7Encode15(out, in.Commit)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GiteeResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GiteeResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GiteeResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GiteeResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon36(l, v)
}
func easyjsonC803d3e7Decode15(in *jlexer.Lexer, out *struct {
	Sha    string `json:"sha"`
	Author struct {
		Name  string    `json:"name"`
		Date  time.Time `json:"date"`
		Email string    `json:"email"`
	} `json:"author"`
	Committer struct {
		Name  string    `json:"name"`
		Date  time.Time `json:"date"`
		Email string    `json:"email"`
	} `json:"committer"`
	Message string `json:"message"`
	Tree    struct {
		Sha string `json:"sha"`
		URL string `json:"url"`
	} `json:"tree"`
	Parents []struct {
		Sha string `json:"sha"`
		URL string `json:"url"`
	} `json:"parents"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sha":
			out.Sha = string(in.String())
		case "author":
			easyjsonC803d3e7Decode16(in, &out.Author)
		case "committer":
			easyjsonC803d3e7Decode16(in, &out.Committer)
		case "message":
			out.Message = string(in.String())
		case "tree":
			easyjsonC803d3e7Decode17(in, &out.Tree)
		case "parents":
			if in.IsNull() {
				in.Skip()
				out.Parents = nil
			} else {
				in.Delim('[')
				if out.Parents == nil {
					if !in.IsDelim(']') {
						out.Parents = make([]struct {
							Sha string `json:"sha"`
							URL string `json:"url"`
						}, 0, 2)
					} else {
						out.Parents = []struct {
							Sha string `json:"sha"`
							URL string `json:"url"`
						}{}
					}
				} else {
					out.Parents = (out.Parents)[:0]
				}
				for !in.IsDelim(']') {
					var v24 struct {
						Sha string `json:"sha"`
						URL string `json:"url"`
					}
					easyjsonC803d3e7Decode17(in, &v24)
					out.Parents = append(out.Parents, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7Encode15(out *jwriter.Writer, in struct {
	Sha    string `json:"sha"`
	Author struct {
		Name  string    `json:"name"`
		Date  time.Time `json:"date"`
		Email string    `json:"email"`
	} `json:"author"`
	Committer struct {
		Name  string    `json:"name"`
		Date  time.Time `json:"date"`
		Email string    `json:"email"`
	} `json:"committer"`
	Message string `json:"message"`
	Tree    struct {
		Sha string `json:"sha"`
		URL string `json:"url"`
	} `json:"tree"`
	Parents []struct {
		Sha string `json:"sha"`
		URL string `json:"url"`
	} `json:"parents"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sha\":"
		out.RawString(prefix[1:])
		out.String(string(in.Sha))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		easyjsonC803d3e7Encode16(out, in.Author)
	}
	{
		const prefix string = ",\"committer\":"
		out.RawString(prefix)
		easyjsonC803d3e7Encode16(out, in.Committer)
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"tree\":"
		out.RawString(prefix)
		easyjsonC803d3e7Encode17(out, in.Tree)
	}
	{
		const prefix string = ",\"parents\":"
		out.RawString(prefix)
		if in.Parents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.Parents {
				if v25 > 0 {
					out.RawByte(',')
				}
				easyjsonC803d3e7Encode17(out, v26)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC803d3e7Decode17(in *jlexer.Lexer, out *struct {
	Sha string `json:"sha"`
	URL string `json:"url"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sha":
			out.Sha = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7Encode17(out *jwriter.Writer, in struct {
	Sha string `json:"sha"`
	URL string `json:"url"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sha\":"
		out.RawString(prefix[1:])
		out.String(string(in.Sha))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	out.RawByte('}')
}
func easyjsonC803d3e7Decode16(in *jlexer.Lexer, out *struct {
	Name  string    `json:"name"`
	Date  time.Time `json:"date"`
	Email string    `json:"email"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7Encode16(out *jwriter.Writer, in struct {
	Name  string    `json:"name"`
	Date  time.Time `json:"date"`
	Email string    `json:"email"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}
func easyjsonC803d3e7Decode14(in *jlexer.Lexer, out *struct {
	Name        string `json:"name"`
	Path        string `json:"path"`
	Size        int    `json:"size"`
	Sha         string `json:"sha"`
	Type        string `json:"type"`
	URL         string `json:"url"`
	HTMLURL     string `json:"html_url"`
	DownloadURL string `json:"download_url"`
	Links       struct {
		Self string `json:"self"`
		HTML string `json:"html"`
	} `json:"_links"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "size":
			out.Size = int(in.Int())
		case "sha":
			out.Sha = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "html_url":
			out.HTMLURL = string(in.String())
		case "download_url":
			out.DownloadURL = string(in.String())
		case "_links":
			easyjsonC803d3e7Decode18(in, &out.Links)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7Encode14(out *jwriter.Writer, in struct {
	Name        string `json:"name"`
	Path        string `json:"path"`
	Size        int    `json:"size"`
	Sha         string `json:"sha"`
	Type        string `json:"type"`
	URL         string `json:"url"`
	HTMLURL     string `json:"html_url"`
	DownloadURL string `json:"download_url"`
	Links       struct {
		Self string `json:"self"`
		HTML string `json:"html"`
	} `json:"_links"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int(int(in.Size))
	}
	{
		const prefix string = ",\"sha\":"
		out.RawString(prefix)
		out.String(string(in.Sha))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"html_url\":"
		out.RawString(prefix)
		out.String(string(in.HTMLURL))
	}
	{
		const prefix string = ",\"download_url\":"
		out.RawString(prefix)
		out.String(string(in.DownloadURL))
	}
	{
		const prefix string = ",\"_links\":"
		out.RawString(prefix)
		easyjsonC803d3e7Encode18(out, in.Links)
	}
	out.RawByte('}')
}
func easyjsonC803d3e7Decode18(in *jlexer.Lexer, out *struct {
	Self string `json:"self"`
	HTML string `json:"html"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "self":
			out.Self = string(in.String())
		case "html":
			out.HTML = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7Encode18(out *jwriter.Writer, in struct {
	Self string `json:"self"`
	HTML string `json:"html"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"self\":"
		out.RawString(prefix[1:])
		out.String(string(in.Self))
	}
	{
		const prefix string = ",\"html\":"
		out.RawString(prefix)
		out.String(string(in.HTML))
	}
	out.RawByte('}')
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon37(in *jlexer.Lexer, out *GiteeAccount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access_token":
			out.AccessToken = string(in.String())
		case "owner":
			out.Owner = string(in.String())
		case "repo":
			out.Repo = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon37(out *jwriter.Writer, in GiteeAccount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"access_token\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccessToken))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.String(string(in.Owner))
	}
	{
		const prefix string = ",\"repo\":"
		out.RawString(prefix)
		out.String(string(in.Repo))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GiteeAccount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GiteeAccount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GiteeAccount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GiteeAccount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon37(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon38(in *jlexer.Lexer, out *FormFile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Key":
			out.Key = string(in.String())
		case "Value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				out.Value = in.Bytes()
			}
		case "Type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon38(out *jwriter.Writer, in FormFile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Key\":"
		out.RawString(prefix)
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Value)
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FormFile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FormFile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FormFile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FormFile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon38(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon39(in *jlexer.Lexer, out *FlickrGetPicResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "XMLName":
			easyjsonC803d3e7DecodeEncodingXml(in, &out.XMLName)
		case "Id":
			out.Id = string(in.String())
		case "Secret":
			out.Secret = string(in.String())
		case "Server":
			out.Server = string(in.String())
		case "Farm":
			out.Farm = string(in.String())
		case "Dateuploaded":
			out.Dateuploaded = string(in.String())
		case "Originalsecret":
			out.Originalsecret = string(in.String())
		case "Originalformat":
			out.Originalformat = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon39(out *jwriter.Writer, in FlickrGetPicResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"XMLName\":"
		out.RawString(prefix[1:])
		easyjsonC803d3e7EncodeEncodingXml(out, in.XMLName)
	}
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"Secret\":"
		out.RawString(prefix)
		out.String(string(in.Secret))
	}
	{
		const prefix string = ",\"Server\":"
		out.RawString(prefix)
		out.String(string(in.Server))
	}
	{
		const prefix string = ",\"Farm\":"
		out.RawString(prefix)
		out.String(string(in.Farm))
	}
	{
		const prefix string = ",\"Dateuploaded\":"
		out.RawString(prefix)
		out.String(string(in.Dateuploaded))
	}
	{
		const prefix string = ",\"Originalsecret\":"
		out.RawString(prefix)
		out.String(string(in.Originalsecret))
	}
	{
		const prefix string = ",\"Originalformat\":"
		out.RawString(prefix)
		out.String(string(in.Originalformat))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FlickrGetPicResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FlickrGetPicResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FlickrGetPicResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FlickrGetPicResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon39(l, v)
}
func easyjsonC803d3e7DecodeEncodingXml(in *jlexer.Lexer, out *xml.Name) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Space":
			out.Space = string(in.String())
		case "Local":
			out.Local = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeEncodingXml(out *jwriter.Writer, in xml.Name) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Space\":"
		out.RawString(prefix[1:])
		out.String(string(in.Space))
	}
	{
		const prefix string = ",\"Local\":"
		out.RawString(prefix)
		out.String(string(in.Local))
	}
	out.RawByte('}')
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon40(in *jlexer.Lexer, out *FlickrAccount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = bool(in.Bool())
		case "default_size":
			out.DefaultSize = string(in.String())
		case "id":
			out.Id = string(in.String())
		case "api_key":
			out.Api_key = string(in.String())
		case "api_secret":
			out.Api_secret = string(in.String())
		case "oauth_token":
			out.Oauth_token = string(in.String())
		case "oauth_token_secret":
			out.Oauth_token_secret = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon40(out *jwriter.Writer, in FlickrAccount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Status))
	}
	{
		const prefix string = ",\"default_size\":"
		out.RawString(prefix)
		out.String(string(in.DefaultSize))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"api_key\":"
		out.RawString(prefix)
		out.String(string(in.Api_key))
	}
	{
		const prefix string = ",\"api_secret\":"
		out.RawString(prefix)
		out.String(string(in.Api_secret))
	}
	{
		const prefix string = ",\"oauth_token\":"
		out.RawString(prefix)
		out.String(string(in.Oauth_token))
	}
	{
		const prefix string = ",\"oauth_token_secret\":"
		out.RawString(prefix)
		out.String(string(in.Oauth_token_secret))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FlickrAccount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FlickrAccount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FlickrAccount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FlickrAccount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon40(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon41(in *jlexer.Lexer, out *FakerTable) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "item":
			if in.IsNull() {
				in.Skip()
				out.Item = nil
			} else {
				in.Delim('[')
				if out.Item == nil {
					if !in.IsDelim(']') {
						out.Item = make([]map[string]string, 0, 8)
					} else {
						out.Item = []map[string]string{}
					}
				} else {
					out.Item = (out.Item)[:0]
				}
				for !in.IsDelim(']') {
					var v30 map[string]string
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v30 = make(map[string]string)
						} else {
							v30 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v31 string
							v31 = string(in.String())
							(v30)[key] = v31
							in.WantComma()
						}
						in.Delim('}')
					}
					out.Item = append(out.Item, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon41(out *jwriter.Writer, in FakerTable) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"item\":"
		out.RawString(prefix)
		if in.Item == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Item {
				if v32 > 0 {
					out.RawByte(',')
				}
				if v33 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v34First := true
					for v34Name, v34Value := range v33 {
						if v34First {
							v34First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v34Name))
						out.RawByte(':')
						out.String(string(v34Value))
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FakerTable) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FakerTable) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FakerTable) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FakerTable) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon41(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon42(in *jlexer.Lexer, out *FakerImage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "msg":
			out.Msg = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]interface{}, 0, 4)
					} else {
						out.Data = []interface{}{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v35 interface{}
					if m, ok := v35.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v35.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v35 = in.Interface()
					}
					out.Data = append(out.Data, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon42(out *jwriter.Writer, in FakerImage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.Data {
				if v36 > 0 {
					out.RawByte(',')
				}
				if m, ok := v37.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v37.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v37))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FakerImage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FakerImage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FakerImage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FakerImage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon42(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon43(in *jlexer.Lexer, out *FakerData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "page_views":
			out.PageViews = int(in.Int())
		case "dis_play_time":
			out.DisPlayTime = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon43(out *jwriter.Writer, in FakerData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"page_views\":"
		out.RawString(prefix)
		out.Int(int(in.PageViews))
	}
	{
		const prefix string = ",\"dis_play_time\":"
		out.RawString(prefix)
		out.String(string(in.DisPlayTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FakerData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FakerData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FakerData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FakerData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon43(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon44(in *jlexer.Lexer, out *DistributionJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hash":
			out.Hash = string(in.String())
		case "url":
			out.Url = string(in.String())
		case "ip":
			out.IP = string(in.String())
		case "store_id":
			out.StoreID = int(in.Int())
		case "user_id":
			out.UserID = int(in.Int())
		case "root":
			out.RootID = int(in.Int())
		case "number":
			out.Number = int(in.Int())
		case "short":
			out.Short = string(in.String())
		case "root_url":
			out.RootUrl = string(in.String())
		case "delete":
			out.Delete = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon44(out *jwriter.Writer, in DistributionJson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix[1:])
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"store_id\":"
		out.RawString(prefix)
		out.Int(int(in.StoreID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"root\":"
		out.RawString(prefix)
		out.Int(int(in.RootID))
	}
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix)
		out.Int(int(in.Number))
	}
	{
		const prefix string = ",\"short\":"
		out.RawString(prefix)
		out.String(string(in.Short))
	}
	{
		const prefix string = ",\"root_url\":"
		out.RawString(prefix)
		out.String(string(in.RootUrl))
	}
	{
		const prefix string = ",\"delete\":"
		out.RawString(prefix)
		out.String(string(in.Delete))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DistributionJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DistributionJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DistributionJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DistributionJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon44(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon45(in *jlexer.Lexer, out *Dispatch) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = bool(in.Bool())
		case "root":
			out.Root = string(in.String())
		case "root_id":
			out.RootID = int(in.Int())
		case "cache_time":
			out.CacheTime = time.Duration(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon45(out *jwriter.Writer, in Dispatch) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Status))
	}
	{
		const prefix string = ",\"root\":"
		out.RawString(prefix)
		out.String(string(in.Root))
	}
	{
		const prefix string = ",\"root_id\":"
		out.RawString(prefix)
		out.Int(int(in.RootID))
	}
	{
		const prefix string = ",\"cache_time\":"
		out.RawString(prefix)
		out.Int64(int64(in.CacheTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Dispatch) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Dispatch) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Dispatch) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Dispatch) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon45(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon46(in *jlexer.Lexer, out *DisPatchOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "node":
			out.Node = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon46(out *jwriter.Writer, in DisPatchOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"node\":"
		out.RawString(prefix[1:])
		out.String(string(in.Node))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DisPatchOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DisPatchOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DisPatchOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DisPatchOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon46(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon47(in *jlexer.Lexer, out *DbOption) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "use_db":
			out.UseDb = bool(in.Bool())
		case "db_type":
			out.DbType = string(in.String())
		case "db_host":
			out.DbHost = string(in.String())
		case "db_name":
			out.DbName = string(in.String())
		case "db_user":
			out.DbUser = string(in.String())
		case "db_pass":
			out.DbPass = string(in.String())
		case "table_prefix":
			out.TablePrefix = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon47(out *jwriter.Writer, in DbOption) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"use_db\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.UseDb))
	}
	{
		const prefix string = ",\"db_type\":"
		out.RawString(prefix)
		out.String(string(in.DbType))
	}
	{
		const prefix string = ",\"db_host\":"
		out.RawString(prefix)
		out.String(string(in.DbHost))
	}
	{
		const prefix string = ",\"db_name\":"
		out.RawString(prefix)
		out.String(string(in.DbName))
	}
	{
		const prefix string = ",\"db_user\":"
		out.RawString(prefix)
		out.String(string(in.DbUser))
	}
	{
		const prefix string = ",\"db_pass\":"
		out.RawString(prefix)
		out.String(string(in.DbPass))
	}
	{
		const prefix string = ",\"table_prefix\":"
		out.RawString(prefix)
		out.String(string(in.TablePrefix))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DbOption) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DbOption) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DbOption) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DbOption) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon47(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon48(in *jlexer.Lexer, out *CCResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "total_success":
			out.TotalSuccess = int(in.Int())
		case "total_error":
			out.TotalError = int(in.Int())
		case "success_image":
			if in.IsNull() {
				in.Skip()
				out.SuccessImage = nil
			} else {
				in.Delim('[')
				if out.SuccessImage == nil {
					if !in.IsDelim(']') {
						out.SuccessImage = make([]struct {
							Name      string `json:"name"`
							URL       string `json:"url"`
							Thumbnail string `json:"thumbnail"`
							Delete    string `json:"delete"`
						}, 0, 1)
					} else {
						out.SuccessImage = []struct {
							Name      string `json:"name"`
							URL       string `json:"url"`
							Thumbnail string `json:"thumbnail"`
							Delete    string `json:"delete"`
						}{}
					}
				} else {
					out.SuccessImage = (out.SuccessImage)[:0]
				}
				for !in.IsDelim(']') {
					var v38 struct {
						Name      string `json:"name"`
						URL       string `json:"url"`
						Thumbnail string `json:"thumbnail"`
						Delete    string `json:"delete"`
					}
					easyjsonC803d3e7Decode19(in, &v38)
					out.SuccessImage = append(out.SuccessImage, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon48(out *jwriter.Writer, in CCResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"total_success\":"
		out.RawString(prefix)
		out.Int(int(in.TotalSuccess))
	}
	{
		const prefix string = ",\"total_error\":"
		out.RawString(prefix)
		out.Int(int(in.TotalError))
	}
	{
		const prefix string = ",\"success_image\":"
		out.RawString(prefix)
		if in.SuccessImage == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v39, v40 := range in.SuccessImage {
				if v39 > 0 {
					out.RawByte(',')
				}
				easyjsonC803d3e7Encode19(out, v40)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CCResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CCResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CCResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CCResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon48(l, v)
}
func easyjsonC803d3e7Decode19(in *jlexer.Lexer, out *struct {
	Name      string `json:"name"`
	URL       string `json:"url"`
	Thumbnail string `json:"thumbnail"`
	Delete    string `json:"delete"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "thumbnail":
			out.Thumbnail = string(in.String())
		case "delete":
			out.Delete = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7Encode19(out *jwriter.Writer, in struct {
	Name      string `json:"name"`
	URL       string `json:"url"`
	Thumbnail string `json:"thumbnail"`
	Delete    string `json:"delete"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"thumbnail\":"
		out.RawString(prefix)
		out.String(string(in.Thumbnail))
	}
	{
		const prefix string = ",\"delete\":"
		out.RawString(prefix)
		out.String(string(in.Delete))
	}
	out.RawByte('}')
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon49(in *jlexer.Lexer, out *BaiduResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "errorn":
			out.Errorn = int(in.Int())
		case "url":
			out.Url = string(in.String())
		case "querySign":
			out.QuerySign = string(in.String())
		case "simid":
			out.Simid = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon49(out *jwriter.Writer, in BaiduResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"errorn\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Errorn))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"querySign\":"
		out.RawString(prefix)
		out.String(string(in.QuerySign))
	}
	{
		const prefix string = ",\"simid\":"
		out.RawString(prefix)
		out.String(string(in.Simid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BaiduResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaiduResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BaiduResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaiduResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon49(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon50(in *jlexer.Lexer, out *AuxpiCookie) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "u_name":
			out.UName = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "version":
			out.Version = string(in.String())
		case "auxpi_token":
			out.AuxpiToken = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon50(out *jwriter.Writer, in AuxpiCookie) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"u_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.UName))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"auxpi_token\":"
		out.RawString(prefix)
		out.String(string(in.AuxpiToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuxpiCookie) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuxpiCookie) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuxpiCookie) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuxpiCookie) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon50(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon51(in *jlexer.Lexer, out *Auxpi) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "author":
			out.Author = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "branch":
			out.Branch = string(in.String())
		case "repositories":
			out.Repositories = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon51(out *jwriter.Writer, in Auxpi) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix[1:])
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"branch\":"
		out.RawString(prefix)
		out.String(string(in.Branch))
	}
	{
		const prefix string = ",\"repositories\":"
		out.RawString(prefix)
		out.String(string(in.Repositories))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Auxpi) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Auxpi) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Auxpi) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Auxpi) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon51(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon52(in *jlexer.Lexer, out *ApiOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = bool(in.Bool())
		case "auth":
			out.Auth = bool(in.Bool())
		case "api_default":
			out.ApiDefault = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon52(out *jwriter.Writer, in ApiOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Status))
	}
	{
		const prefix string = ",\"auth\":"
		out.RawString(prefix)
		out.Bool(bool(in.Auth))
	}
	{
		const prefix string = ",\"api_default\":"
		out.RawString(prefix)
		out.String(string(in.ApiDefault))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon52(l, v)
}
func easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon53(in *jlexer.Lexer, out *AliResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fs_url":
			out.FsUrl = string(in.String())
		case "code":
			out.Code = string(in.String())
		case "size":
			out.Size = string(in.String())
		case "width":
			out.Width = string(in.String())
		case "url":
			out.Url = string(in.String())
		case "hash":
			out.Hash = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon53(out *jwriter.Writer, in AliResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fs_url\":"
		out.RawString(prefix[1:])
		out.String(string(in.FsUrl))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.String(string(in.Size))
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.String(string(in.Width))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix)
		out.String(string(in.Hash))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AliResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AliResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComJinfagangPicbedCommon53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AliResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AliResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComJinfagangPicbedCommon53(l, v)
}
